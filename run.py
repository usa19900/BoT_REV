import time
import requests
import logging
import json
import os
import re
from telegram import Bot, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.error import TimedOut
import asyncio
#======= IMPORT =====
os.system('clear')
# === CONFIG ===
BOT_TOKEN = '7712846560:AAF-NrFnIIhy5PYmkEfQ3_r87MlNBvLe6ik'
CHAT_ID = '-1002840089889'
USERNAME = 'ahindada420'
PASSWORD = 'ahindada420'
BASE_URL = "http://94.23.120.156"
LOGIN_PAGE_URL = BASE_URL + "/ints/login"
LOGIN_POST_URL = BASE_URL + "/ints/signin"
DATA_URL = BASE_URL + "/ints/client/res/data_smscdr.php"

bot = Bot(token=BOT_TOKEN)
session = requests.Session()
session.headers.update({"User-Agent": "Mozilla/5.0"})
logging.basicConfig(level=logging.INFO, format='%(message)s')

# === Country Code Map ===
COUNTRY_MAP = {
    '1': 'üá∫üá∏ USA / Canada',
    '7': 'üá∑üá∫ Russia / Kazakhstan',
    '20': 'üá™üá¨ Egypt',
    '27': 'üáøüá¶ South Africa',
    '30': 'üá¨üá∑ Greece',
    '31': 'üá≥üá± Netherlands',
    '32': 'üáßüá™ Belgium',
    '33': 'üá´üá∑ France',
    '34': 'üá™üá∏ Spain',
    '36': 'üá≠üá∫ Hungary',
    '39': 'üáÆüáπ Italy',
    '40': 'üá∑üá¥ Romania',
    '41': 'üá®üá≠ Switzerland',
    '43': 'üá¶üáπ Austria',
    '44': 'üá¨üáß United Kingdom',
    '45': 'üá©üá∞ Denmark',
    '46': 'üá∏üá™ Sweden',
    '47': 'üá≥üá¥ Norway',
    '48': 'üáµüá± Poland',
    '49': 'üá©üá™ Germany',
    '51': 'üáµüá™ Peru',
    '52': 'üá≤üáΩ Mexico',
    '53': 'üá®üá∫ Cuba',
    '54': 'üá¶üá∑ Argentina',
    '55': 'üáßüá∑ Brazil',
    '56': 'üá®üá± Chile',
    '57': 'üá®üá¥ Colombia',
    '58': 'üáªüá™ Venezuela',
    '60': 'üá≤üáæ Malaysia',
    '61': 'üá¶üá∫ Australia',
    '62': 'üáÆüá© Indonesia',
    '63': 'üáµüá≠ Philippines',
    '64': 'üá≥üáø New Zealand',
    '65': 'üá∏üá¨ Singapore',
    '66': 'üáπüá≠ Thailand',
    '81': 'üáØüáµ Japan',
    '82': 'üá∞üá∑ South Korea',
    '84': 'üáªüá≥ Vietnam',
    '86': 'üá®üá≥ China',
    '90': 'üáπüá∑ Turkey',
    '91': 'üáÆüá≥ India',
    '92': 'üáµüá∞ Pakistan',
    '93': 'üá¶üá´ Afghanistan',
    '94': 'üá±üá∞ Sri Lanka',
    '95': 'üá≤üá≤ Myanmar',
    '98': 'üáÆüá∑ Iran',
    '211': 'üá∏üá∏ South Sudan',
    '212': 'üá≤üá¶ Morocco',
    '213': 'üá©üáø Algeria',
    '216': 'üáπüá≥ Tunisia',
    '218': 'üá±üáæ Libya',
    '220': 'üá¨üá≤ Gambia',
    '221': 'üá∏üá≥ Senegal',
    '222': 'üá≤üá∑ Mauritania',
    '223': 'üá≤üá± Mali',
    '224': 'üá¨üá≥ Guinea',
    '225': 'üá®üáÆ C√¥te d\'Ivoire',
    '226': 'üáßüá´ Burkina Faso',
    '227': 'üá≥üá™ Niger',
    '228': 'üáπüá¨ Togo',
    '229': 'üáßüáØ Benin',
    '230': 'üá≤üá∫ Mauritius',
    '231': 'üá±üá∑ Liberia',
    '232': 'üá∏üá± Sierra Leone',
    '233': 'üá¨üá≠ Ghana',
    '234': 'üá≥üá¨ Nigeria',
    '235': 'üáπüá© Chad',
    '236': 'üá®üá´ Central African Republic',
    '237': 'üá®üá≤ Cameroon',
    '238': 'üá®üáª Cape Verde',
    '239': 'üá∏üáπ Sao Tome & Principe',
    '240': 'üá¨üá∂ Equatorial Guinea',
    '241': 'üá¨üá¶ Gabon',
    '242': 'üá®üá¨ Congo',
    '243': 'üá®üá© DR Congo',
    '244': 'üá¶üá¥ Angola',
    '249': 'üá∏üá© Sudan',
    '250': 'üá∑üáº Rwanda',
    '251': 'üá™üáπ Ethiopia',
    '252': 'üá∏üá¥ Somalia',
    '253': 'üá©üáØ Djibouti',
    '254': 'üá∞üá™ Kenya',
    '255': 'üáπüáø Tanzania',
    '256': 'üá∫üá¨ Uganda',
    '257': 'üáßüáÆ Burundi',
    '258': 'üá≤üáø Mozambique',
    '260': 'üáøüá≤ Zambia',
    '261': 'üá≤üá¨ Madagascar',
    '263': 'üáøüáº Zimbabwe',
    '264': 'üá≥üá¶ Namibia',
    '265': 'üá≤üáº Malawi',
    '266': 'üá±üá∏ Lesotho',
    '267': 'üáßüáº Botswana',
    '268': 'üá∏üáø Eswatini',
    '269': 'üá∞üá≤ Comoros',
    '290': 'üá∏üá≠ Saint Helena',
    '291': 'üá™üá∑ Eritrea',
    '297': 'üá¶üáº Aruba',
    '298': 'üá´üá¥ Faroe Islands',
    '299': 'üá¨üá± Greenland',
    '350': 'üá¨üáÆ Gibraltar',
    '351': 'üáµüáπ Portugal',
    '352': 'üá±üá∫ Luxembourg',
    '353': 'üáÆüá™ Ireland',
    '354': 'üáÆüá∏ Iceland',
    '355': 'üá¶üá± Albania',
    '356': 'üá≤üáπ Malta',
    '357': 'üá®üáæ Cyprus',
    '358': 'üá´üáÆ Finland',
    '359': 'üáßüá¨ Bulgaria',
    '370': 'üá±üáπ Lithuania',
    '371': 'üá±üáª Latvia',
    '372': 'üá™üá™ Estonia',
    '373': 'üá≤üá© Moldova',
    '374': 'üá¶üá≤ Armenia',
    '375': 'üáßüáæ Belarus',
    '376': 'üá¶üá© Andorra',
    '377': 'üá≤üá® Monaco',
    '378': 'üá∏üá≤ San Marino',
    '380': 'üá∫üá¶ Ukraine',
    '381': 'üá∑üá∏ Serbia',
    '382': 'üá≤üá™ Montenegro',
    '383': 'üáΩüá∞ Kosovo',
    '385': 'üá≠üá∑ Croatia',
    '386': 'üá∏üáÆ Slovenia',
    '387': 'üáßüá¶ Bosnia & Herzegovina',
    '389': 'üá≤üá∞ North Macedonia',
    '420': 'üá®üáø Czech Republic',
    '421': 'üá∏üá∞ Slovakia',
    '423': 'üá±üáÆ Liechtenstein',
    '852': 'üá≠üá∞ Hong Kong',
    '853': 'üá≤üá¥ Macau',
    '855': 'üá∞üá≠ Cambodia',
    '856': 'üá±üá¶ Laos',
    '880': 'üáßüá© Bangladesh',
    '886': 'üáπüáº Taiwan',
    '960': 'üá≤üáª Maldives',
    '961': 'üá±üáß Lebanon',
    '962': 'üáØüá¥ Jordan',
    '963': 'üá∏üáæ Syria',
    '964': 'üáÆüá∂ Iraq',
    '965': 'üá∞üáº Kuwait',
    '966': 'üá∏üá¶ Saudi Arabia',
    '967': 'üáæüá™ Yemen',
    '968': 'üá¥üá≤ Oman',
    '970': 'üáµüá∏ Palestine',
    '971': 'üá¶üá™ UAE',
    '972': 'üáÆüá± Israel',
    '973': 'üáßüá≠ Bahrain',
    '974': 'üá∂üá¶ Qatar',
    '975': 'üáßüáπ Bhutan',
    '976': 'üá≤üá≥ Mongolia',
    '977': 'üá≥üáµ Nepal',
    '992': 'üáπüáØ Tajikistan',
    '993': 'üáπüá≤ Turkmenistan',
    '994': 'üá¶üáø Azerbaijan',
    '995': 'üá¨üá™ Georgia',
    '996': 'üá∞üá¨ Kyrgyzstan',
    '998': 'üá∫üáø Uzbekistan'
}

def get_country_from_number(number: str) -> str:
    for code in sorted(COUNTRY_MAP.keys(), key=lambda x: -len(x)):
        if number.startswith(code):
            return COUNTRY_MAP[code]
    return 'üåç Unknown'

def escape_html(text: str) -> str:
    return text.replace("&", "&amp;").replace("<", "&lt;").replace(">", "&gt;")

def save_already_sent(already_sent):
    with open("already_sent.json", "w") as f:
        json.dump(list(already_sent), f)

def load_already_sent():
    if os.path.exists("already_sent.json"):
        with open("already_sent.json", "r") as f:
            return set(json.load(f))
    return set()

def login():
    try:
        resp = session.get(LOGIN_PAGE_URL)
        match = re.search(r'What is (\d+) \+ (\d+)', resp.text)
        if not match:
            logging.error("Captcha not found.")
            return False
        num1, num2 = int(match.group(1)), int(match.group(2))
        captcha_answer = num1 + num2

        payload = {"username": USERNAME, "password": PASSWORD, "capt": captcha_answer}
        headers = {"Content-Type": "application/x-www-form-urlencoded", "Referer": LOGIN_PAGE_URL}

        resp = session.post(LOGIN_POST_URL, data=payload, headers=headers)
        if "dashboard" in resp.text.lower() or "logout" in resp.text.lower():
            logging.info("Login successful ‚úÖ")
            return True
        else:
            logging.error("Login failed ‚ùå")
            return False
    except Exception as e:
        logging.error(f"Login error: {e}")
        return False

def build_api_url():
    start_date = "2025-04-25"
    end_date = "2026-01-01"
    return (
        f"{DATA_URL}?fdate1={start_date}%2000:00:00&fdate2={end_date}%2023:59:59&"
        "frange=&fnum=&fcli=&fgdate=&fgmonth=&fgrange=&fgnumber=&fgcli=&fg=0&"
        "sEcho=1&iColumns=7&sColumns=%2C%2C%2C%2C%2C%2C&iDisplayStart=0&iDisplayLength=25&"
        "mDataProp_0=0&sSearch_0=&bRegex_0=false&bSearchable_0=true&bSortable_0=true&"
        "mDataProp_1=1&sSearch_1=&bRegex_1=false&bSearchable_1=true&bSortable_1=true&"
        "mDataProp_2=2&sSearch_2=&bRegex_2=false&bSearchable_2=true&bSortable_2=true&"
        "mDataProp_3=3&sSearch_3=&bRegex_3=false&bSearchable_3=true&bSortable_3=true&"
        "mDataProp_4=4&sSearch_4=&bRegex_4=false&bSearchable_4=true&bSortable_4=true&"
        "mDataProp_5=5&sSearch_5=&bRegex_5=false&bSearchable_5=true&bSortable_5=true&"
        "mDataProp_6=6&sSearch_6=&bRegex_6=false&bSearchable_6=true&bSortable_6=true&"
        "sSearch=&bRegex=false&iSortCol_0=0&sSortDir_0=desc&iSortingCols=1"
    )

def fetch_data():
    url = build_api_url()
    headers = {"X-Requested-With": "XMLHttpRequest"}

    try:
        response = session.get(url, headers=headers, timeout=10)
        if response.status_code == 200:
            return response.json()
        elif response.status_code == 403 or "login" in response.text.lower():
            logging.warning("Session expired. Re-logging...")
            if login():
                return fetch_data()
            return None
        else:
            logging.error(f"Unexpected error: {response.status_code}")
            return None
    except Exception as e:
        logging.error(f"Fetch error: {e}")
        return None

already_sent = load_already_sent()

async def sent_messages():
    logging.info("üîç Checking for messages...\n")
    data = fetch_data()

    if data and 'aaData' in data:
        for row in data['aaData']:
            date = str(row[0]).strip()
            number = str(row[2]).strip()
            service = str(row[3]).strip()
            message = str(row[4]).strip()

            match = re.search(r'\d{3}-\d{3}|\d{4,6}', message)
            otp = match.group() if match else None

            if otp:
                unique_key = f"{number}|{otp}"
                if unique_key not in already_sent:
                    already_sent.add(unique_key)

                    country = get_country_from_number(number)

                    text = (
                        "‚ú® <b>OTP Received</b> ‚ú®\n\n"
                        f"‚è∞ <b>Time:</b> {escape_html(date)}\n"
                        f"üìû <b>Number:</b> {escape_html(number)}\n"
                        f"üåç <b>Country:</b> {country}\n"
                        f"üîß <b>Service:</b> {escape_html(service)}\n"
                        f"üîê <b>OTP Code:</b> <code>{escape_html(otp)}</code>\n"
                        f"üìù <b>Msg:</b> <i>{escape_html(message)}</i>\n\n"
                        "<b>P0WERED BY</b> Ahin Dada "
                    )

                    keyboard = InlineKeyboardMarkup([
                        [InlineKeyboardButton("üë®‚Äçüíª Bot Owner", url="https://t.me/ahindada213")],
                        [InlineKeyboardButton("üîÅ Number Channel", url="https://t.me/xzrmethod")]
                    ])

                    try:
                        await bot.send_message(
                            chat_id=CHAT_ID,
                            text=text,
                            parse_mode="HTML",
                            disable_web_page_preview=True,
                            reply_markup=keyboard
                        )
                        save_already_sent(already_sent)
                        logging.info(f"[+] Sent OTP: {otp}")
                    except TimedOut:
                        logging.error("Telegram TimedOut")
                    except Exception as e:
                        logging.error(f"Telegram error: {e}")
            else:
                logging.info(f"No OTP found in: {message}")
    else:
        logging.info("No data or invalid response.")

async def main():
    if login():
        while True:
            await sent_messages()
            await asyncio.sleep(3)
    else:
        logging.error("Initial login failed. Exiting...")

# Run bot
asyncio.run(main())
